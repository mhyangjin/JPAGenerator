package com.udmtek.DBCoreGen.Comm;

import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import JPAMapper.TypeToImportClass;


public class DBCoreGenFileWriter {
	
	static final String commentString="/***\r\n" + 
			"* @author julu1 <julu1 @ naver.com >\r\n" + 
			"* @version 0.2.0\r\n" +
			"* generated by DBCoreGen\r\n" +
			"*/\r\n";
	
	public static class ClassPack {
		private String 		packageDefine;
		private StringBuffer importString;
		private Map<String,String> importStringMap;
		private StringBuffer classDefString;
		private StringBuffer attrDefString;
		private StringBuffer methodDefString;
		
		public ClassPack (String packName) {
				packageDefine = "package "+ packName + ";";
				importStringMap = new HashMap<>();
				importString= new StringBuffer();
				classDefString = new StringBuffer();
				attrDefString = new StringBuffer();
				methodDefString = new StringBuffer();
			}
			
		public String makeTotals() {
				return packageDefine + "\r\n\r\n" + 
						importString + "\r\n" +
						commentString + "\r\n" +
						classDefString + " {\r\n" +
						attrDefString + "\r\n" +
						methodDefString +"\r\n" +
						"}";
			}
		
		public void makeImportString(String defineName) {
			//import 했던 것은 제외
			if (importStringMap.get(defineName) != null )return;
			//String type은 제외
			if ( defineName.equals("String")) return;
			
			TypeToImportClass typeImportClass=null;
			try {
				typeImportClass=TypeToImportClass.valueOf(defineName);
			} 
			catch (Exception e){
				DBCoreGenLogger.printError(defineName + " has no type"); 
				return;
			}
			importString.append(typeImportClass.getImport());
			importString.append(";\r\n");
			importStringMap.put(defineName,typeImportClass.getImport());
		}
		
		public void addClassDef(String addString) {
			classDefString.append(addString);
			classDefString.append("\r\n");
		}
		
		public void addAttrDef(String addString) {
			attrDefString.append(addString);
			attrDefString.append("\r\n");
		}
		
		public void addMethodDef(String addString) {
			methodDefString.append(addString);
			methodDefString.append("\r\n");
		}
	}

	public static ClassPack setClassDefine(String packName) {
		return new ClassPack(packName);
	}
	
	public static void writeStream (BufferedWriter bufferwriter, ClassPack classPack ) throws IOException {
		bufferwriter.write(classPack.makeTotals());
	}
	
	public static void writeStream ( BufferedWriter bufferwriter, StringBuffer stringbuf ) throws IOException {
		bufferwriter.write(stringbuf.toString());
		bufferwriter.newLine();
	}

	
	public static File makeFile(String fileName ) {	
		File writeFile= new File (fileName);
		return writeFile;
	}
	
	public static String convertCamel(String orgString) {
		StringBuffer orgStringBuf=new StringBuffer(orgString.toLowerCase());
		while (true) {
			int point =0;
			if ((point=orgStringBuf.indexOf("_") )== -1)
				break;
			orgStringBuf.deleteCharAt(point);
			orgStringBuf.setCharAt(point, String.valueOf(orgStringBuf.charAt(point)).toUpperCase().charAt(0));
		}
		
		return orgStringBuf.toString();
	}
	

}
